apply plugin:'application'
mainClassName = 'test.Main'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.apache.httpcomponents:httpcore:4.4.1'
    compile 'org.apache.httpcomponents:httpclient:4.5'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        // TODO: process options
        // println 'JavaCompile task: ' + it.name
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }
    def javaCompileTasks = tasks.withType(JavaCompile).collect()
    javaCompileTasks.each {
        task ->
        def newTaskName = task.name + 'Maybe'
        println 'generate new task: ' + task.name
        def options = task.getOptions()
        task.dependsOn { newTaskName }
        task.enabled = false
        tasks.create(name: newTaskName, type: JavaExec) {
            // setup input and output to take advantage of UP-TO-DATE
            inputs.file task.source
            outputs.dir task.destinationDir

            // TODO: use maven to get maybe libs
            classpath fileTree(dir: 'libs-maybe', include: '*.jar')

            main = 'edu.buffalo.cse.blue.maybe.Main'

            def arguments = ['-d', task.destinationDir]
            if (options.bootClasspath != null) {
                arguments.addAll(['-bootclasspath', options.bootClasspath])
            }
            // TODO: polyglot doesn't support -Xlint
            // arguments.addAll(options.compilerArgs)

            if (options.encoding != null) {
                // TODO: polyglot doesn't support -encoding
                arguments.addAll(['-encoding', options.encoding])
            }

            task.classpath.each {
                path -> arguments.addAll(['-classpath', path])
            }

            task.source.each { file -> arguments.add(file) }

            args arguments
        }
    }
}

apply plugin:'application'
mainClassName = 'test.Main'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
}

// def classpath = tasks.compileJava.classpath.getAsPath()
def destinationDir =  tasks.compileJava.destinationDir
def javaSources = sourceSets.main.allJava.getFiles()

task compileJava(type: JavaExec, overwrite: true) {
    inputs.file javaSources
    outputs.dir destinationDir
    classpath fileTree(dir: 'libs', include: '*.jar')
    // main = 'test.Main'
    main = 'edu.buffalo.cse.blue.maybe.Main'
    def arguments = ['-d', destinationDir]
    arguments.addAll(javaSources)
    println 'maybe'
    println ' Java files: ' + javaSources
    args arguments
}

task a << {
    println 'task a'
}

task b(dependsOn: a) << {
// task b << {
    println 'task b'
}

compileJava.doFirst {
    println 'compileJava doFirst'
}

compileJava.doLast {
    println 'compileJava doFirst'
}

classes.dependsOn {
    tasks.findAll { task -> task.name.equals('compileJava') }
}

run.dependsOn {
    tasks.findAll { task -> task.name.equals('compileJava') }
}

b.dependsOn {
    tasks.findAll { task -> task.name.equals('a') }
}

task a(overwrite: true) << {
    println 'overwrite task a'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        println 'JavaCompile task: ' + it.name
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }
}

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'xcv58' at '8/21/15 4:02 PM' with Gradle 2.6
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin:'application'
mainClassName = 'test.Main'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
}

// def classpath = tasks.compileJava.classpath.getAsPath()
def destinationDir =  tasks.compileJava.destinationDir
def javaSources = sourceSets.main.allJava.getFiles()

task compileJava(type: JavaExec, overwrite: true) {
    inputs.file javaSources
    outputs.dir destinationDir
// task maybe(type: JavaExec) {
    classpath fileTree(dir: 'libs', include: '*.jar')
    // main = 'test.Main'
    main = 'edu.buffalo.cse.blue.maybe.Main'
    def arguments = ['-d', destinationDir]
    arguments.addAll(javaSources)
    println 'maybe'
    println ' Java files: ' + javaSources
    args arguments
}

// tasks.run.dependsOn + compileJava

task a << {
    println 'task a'
}

task b(dependsOn: a) << {
// task b << {
    println 'task b'
}

compileJava.doFirst {
    println 'compileJava doFirst'
}

compileJava.doLast {
    println 'compileJava doFirst'
}

classes.dependsOn {
    tasks.findAll { task -> task.name.equals('compileJava') }
}

run.dependsOn {
    tasks.findAll { task -> task.name.equals('compileJava') }
}

b.dependsOn {
    tasks.findAll { task -> task.name.equals('a') }
}

println tasks.b.dependsOn
// b.dependsOn.remove("a")

task a(overwrite: true) << {
    println 'overwrite task a'
}


// task maybe(type: JavaExec) {
//     classpath sourceSets.main.runtimeClasspath
//     println ' classpath: ' + classpath.getAsPath()
//     main = 'test.Main'
//     def arguments = ['-c', '-d', getProject().getBuildDir()]
//     arguments.addAll(sourceSets.main.allJava.getFiles())
//     println ' Java files: ' + sourceSets.main.allJava.getFiles()
//     main = 'edu.buffalo.cse.blue.maybe.Main'
//     args arguments
// }

// println ' tasks.maybe.commandLine' + tasks.maybe.commandLine

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        println 'JavaCompile task: ' + it.name
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }
}

/*
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
